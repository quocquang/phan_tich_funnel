import pandas as pd
import streamlit as st
import plotly.express as px
from io import BytesIO
import numpy as np

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(layout="wide", page_title="Ph√¢n T√≠ch Funnel")

# CSS t√πy ch·ªânh giao di·ªán
st.markdown("""
    <style>
    .main > div {
        padding: 2rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
    }
    </style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data(file):
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file)
        elif file.name.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(file)
        else:
            st.error("ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng CSV ho·∫∑c Excel.")
            return None

        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü t√™n c·ªôt
        df.columns = df.columns.str.strip()
        
        # Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ng√†y th√°ng
        date_columns = ["Ng√†y d·ª± ki·∫øn k√≠ Hƒê", "Th·ªùi ƒëi·ªÉm t·∫°o"]
        for col in date_columns:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors='coerce')
                
        # Chuy·ªÉn ƒë·ªïi c·ªôt 'T·ªâ l·ªá th·∫Øng' t·ª´ d·∫°ng chu·ªói sang s·ªë
        if 'T·ªâ l·ªá th·∫Øng' in df.columns:
            df['T·ªâ l·ªá th·∫Øng'] = df['T·ªâ l·ªá th·∫Øng'].str.rstrip('%').astype('float') / 100
        
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")
        return None

def show_filters(df):
    st.sidebar.header("B·ªô l·ªçc")
    
    filters = {}
    
    # Ch·ªâ th√™m filter cho c√°c c·ªôt t·ªìn t·∫°i trong DataFrame
    if "T√™n kh√°ch h√†ng" in df.columns:
        filters["T√™n kh√°ch h√†ng"] = st.sidebar.multiselect(
            "T√™n kh√°ch h√†ng:",
            options=sorted(df["T√™n kh√°ch h√†ng"].dropna().unique())
        )
    
    if "Giai ƒëo·∫°n" in df.columns:
        filters["Giai ƒëo·∫°n"] = st.sidebar.multiselect(
            "Giai ƒëo·∫°n:",
            options=sorted(df["Giai ƒëo·∫°n"].dropna().unique())
        )
    
    if "T·ªânh/TP" in df.columns:
        filters["T·ªânh/TP"] = st.sidebar.multiselect(
            "T·ªânh/TP:",
            options=sorted(df["T·ªânh/TP"].dropna().astype(str).unique())
        )
    
    return apply_filters(df, filters)

def apply_filters(df, filters):
    filtered_df = df.copy()
    
    for column, selected_values in filters.items():
        if selected_values:  # Ch·ªâ √°p d·ª•ng filter n·∫øu c√≥ gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn
            filtered_df = filtered_df[filtered_df[column].isin(selected_values)]
    
    return filtered_df

def show_basic_metrics(df):
    try:
        # Chuy·ªÉn ƒë·ªïi 'Doanh thu d·ª± ki·∫øn' sang ki·ªÉu s·ªë
        df['Doanh thu d·ª± ki·∫øn'] = pd.to_numeric(df['Doanh thu d·ª± ki·∫øn'], errors='coerce')
        
        col1, col2, col3, col4, col5, col6 = st.columns(6)
        
        with col1:
            total_opportunities = len(df)
            st.metric("T·ªïng s·ªë c∆° h·ªôi", f"{total_opportunities:,}")
        
        with col2:
            total_revenue = df['Doanh thu d·ª± ki·∫øn'].sum()
            st.metric("T·ªïng doanh thu d·ª± ki·∫øn", f"{total_revenue:,.0f} VND")
        
        with col3:
            avg_revenue = df['Doanh thu d·ª± ki·∫øn'].mean()
            st.metric("Doanh thu trung b√¨nh", f"{avg_revenue:,.0f} VND")

        with col4:
            win_rate = df[df['Tr·∫°ng th√°i'] == 'Active']['T·ªâ l·ªá th·∫Øng'].mean()
            st.metric("T·ªâ l·ªá th·∫Øng trung b√¨nh", f"{win_rate:.1f}%")
        
        with col5:
            active_opportunities = len(df[df['Tr·∫°ng th√°i'] == 'Active'])
            st.metric("S·ªë c∆° h·ªôi ƒëang ho·∫°t ƒë·ªông", f"{active_opportunities:,}")
        
        with col6:
            avg_conversion_time = (df['Ng√†y d·ª± ki·∫øn k√≠ Hƒê'] - df['Th·ªùi ƒëi·ªÉm t·∫°o']).mean()
            st.metric("Th·ªùi gian chuy·ªÉn ƒë·ªïi trung b√¨nh", f"{avg_conversion_time.days} ng√†y")
            
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh to√°n metrics c∆° b·∫£n: {str(e)}")

def show_revenue_by_stage(df):
    try:
        if 'Giai ƒëo·∫°n' in df.columns and 'Doanh thu d·ª± ki·∫øn' in df.columns:
            fig = px.box(df, 
                        x="Giai ƒëo·∫°n", 
                        y="Doanh thu d·ª± ki·∫øn",
                        title="Ph√¢n b·ªë doanh thu d·ª± ki·∫øn theo giai ƒëo·∫°n")
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì ph√¢n b·ªë doanh thu: {str(e)}")

def show_detailed_data(df):
    try:
        st.subheader("D·ªØ li·ªáu chi ti·∫øt")
        
        # T·∫°o m·ªôt b·∫£n sao c·ªßa df ƒë·ªÉ ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
        formatted_df = df.copy()
        
        # Chuy·ªÉn ƒë·ªïi 'Doanh thu d·ª± ki·∫øn' v√† 'T·ªâ l·ªá th·∫Øng' sang ƒë·ªãnh d·∫°ng s·ªë
        if 'Doanh thu d·ª± ki·∫øn' in formatted_df.columns:
            formatted_df['Doanh thu d·ª± ki·∫øn'] = pd.to_numeric(formatted_df['Doanh thu d·ª± ki·∫øn'], errors='coerce')
        if 'T·ªâ l·ªá th·∫Øng' in formatted_df.columns:
            formatted_df['T·ªâ l·ªá th·∫Øng'] = pd.to_numeric(formatted_df['T·ªâ l·ªá th·∫Øng'], errors='coerce')
        
        # ƒê·ªãnh d·∫°ng d·ªØ li·ªáu khi hi·ªÉn th·ªã
        st.dataframe(
            formatted_df.style.format({
                "Doanh thu d·ª± ki·∫øn": "{:,.0f}",
                "T·ªâ l·ªá th·∫Øng": "{:.1f}%"
            })
        )
        
        # Download button
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            "üì• T·∫£i xu·ªëng d·ªØ li·ªáu",
            csv,
            "data.csv",
            "text/csv",
            key='download-csv'
        )
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu chi ti·∫øt: {str(e)}")

def show_opportunities_by_customer(df):
    try:
        customer_opportunities = df['T√™n kh√°ch h√†ng'].value_counts().reset_index()
        customer_opportunities.columns = ['T√™n kh√°ch h√†ng', 'S·ªë c∆° h·ªôi']
        
        fig = px.bar(customer_opportunities, 
                     x='T√™n kh√°ch h√†ng', 
                     y='S·ªë c∆° h·ªôi',
                     title="S·ªë c∆° h·ªôi theo kh√°ch h√†ng",
                     labels={'T√™n kh√°ch h√†ng': 'T√™n kh√°ch h√†ng', 'S·ªë c∆° h·ªôi': 'S·ªë c∆° h·ªôi'})
        st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì s·ªë c∆° h·ªôi theo kh√°ch h√†ng: {str(e)}")

def show_revenue_by_region(df):
    try:
        if 'T·ªânh/TP' in df.columns and 'Doanh thu d·ª± ki·∫øn' in df.columns:
            revenue_by_region = df.groupby('T·ªânh/TP')['Doanh thu d·ª± ki·∫øn'].sum().reset_index()
            
            fig = px.bar(revenue_by_region, 
                         x='T·ªânh/TP', 
                         y='Doanh thu d·ª± ki·∫øn',
                         title="Doanh thu d·ª± ki·∫øn theo v√πng",
                         labels={'T·ªânh/TP': 'T·ªânh/TP', 'Doanh thu d·ª± ki·∫øn': 'Doanh thu d·ª± ki·∫øn (VND)'})
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo v√πng: {str(e)}")

def show_revenue_by_product(df):
    try:
        if 'Ng√†nh h√†ng' in df.columns and 'Doanh thu d·ª± ki·∫øn' in df.columns:
            revenue_by_product = df.groupby('Ng√†nh h√†ng')['Doanh thu d·ª± ki·∫øn'].sum().reset_index()
            
            fig = px.pie(revenue_by_product, 
                         names='Ng√†nh h√†ng', 
                         values='Doanh thu d·ª± ki·∫øn',
                         title="Doanh thu d·ª± ki·∫øn theo ng√†nh h√†ng")
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo ng√†nh h√†ng: {str(e)}")

def show_conversion_rate_by_stage(df):
    try:
        if 'Giai ƒëo·∫°n' in df.columns:
            conversion_rate_by_stage = df.groupby('Giai ƒëo·∫°n')['T·ªâ l·ªá th·∫Øng'].mean().reset_index()
            
            fig = px.bar(conversion_rate_by_stage, 
                         x='Giai ƒëo·∫°n', 
                         y='T·ªâ l·ªá th·∫Øng',
                         title="T·ªâ l·ªá chuy·ªÉn ƒë·ªïi theo giai ƒëo·∫°n",
                         labels={'Giai ƒëo·∫°n': 'Giai ƒëo·∫°n', 'T·ªâ l·ªá th·∫Øng': 'T·ªâ l·ªá th·∫Øng'})
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì t·ªâ l·ªá chuy·ªÉn ƒë·ªïi theo giai ƒëo·∫°n: {str(e)}")

def show_sales_by_salesperson(df):
    try:
        if 'Nh√¢n vi√™n kinh doanh' in df.columns and 'Doanh thu d·ª± ki·∫øn' in df.columns:
            sales_by_salesperson = df.groupby('Nh√¢n vi√™n kinh doanh')['Doanh thu d·ª± ki·∫øn'].sum().reset_index()
            
            fig = px.bar(sales_by_salesperson, 
                         x='Nh√¢n vi√™n kinh doanh', 
                         y='Doanh thu d·ª± ki·∫øn',
                         title="Doanh thu theo nh√¢n vi√™n kinh doanh",
                         labels={'Nh√¢n vi√™n kinh doanh': 'Nh√¢n vi√™n kinh doanh', 'Doanh thu d·ª± ki·∫øn': 'Doanh thu d·ª± ki·∫øn (VND)'})
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì doanh thu theo nh√¢n vi√™n kinh doanh: {str(e)}")

def show_opportunities_by_competitor(df):
    try:
        if 'ƒê·ªëi th·ªß' in df.columns:
            opportunities_by_competitor = df['ƒê·ªëi th·ªß'].value_counts().reset_index()
            opportunities_by_competitor.columns = ['ƒê·ªëi th·ªß', 'S·ªë c∆° h·ªôi']
            
            fig = px.bar(opportunities_by_competitor, 
                         x='ƒê·ªëi th·ªß', 
                         y='S·ªë c∆° h·ªôi',
                         title="S·ªë c∆° h·ªôi theo ƒë·ªëi th·ªß",
                         labels={'ƒê·ªëi th·ªß': 'ƒê·ªëi th·ªß', 'S·ªë c∆° h·ªôi': 'S·ªë c∆° h·ªôi'})
            st.plotly_chart(fig, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì s·ªë c∆° h·ªôi theo ƒë·ªëi th·ªß: {str(e)}")

def main():
    st.title('üéØ Ph√¢n T√≠ch Funnel')
    
    uploaded_file = st.sidebar.file_uploader(
        "üìÇ T·∫£i l√™n file d·ªØ li·ªáu",
        type=['csv', 'xlsx', 'xls'],
        help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng CSV v√† Excel"
    )
    
    if uploaded_file is not None:
        df = load_data(uploaded_file)
        
        if df is not None:
            # √Åp d·ª•ng b·ªô l·ªçc
            filtered_df = show_filters(df)
            
            # Hi·ªÉn th·ªã c√°c metrics c∆° b·∫£n
            st.header("1. T·ªïng quan")
            show_basic_metrics(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n b·ªë doanh thu
            st.header("2. Ph√¢n t√≠ch doanh thu")
            show_revenue_by_stage(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s·ªë c∆° h·ªôi theo kh√°ch h√†ng
            st.header("3. S·ªë c∆° h·ªôi theo kh√°ch h√†ng")
            show_opportunities_by_customer(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì doanh thu theo v√πng
            st.header("4. Doanh thu theo v√πng")
            show_revenue_by_region(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì doanh thu theo ng√†nh h√†ng
            st.header("5. Doanh thu theo ng√†nh h√†ng")
            show_revenue_by_product(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì t·ªâ l·ªá chuy·ªÉn ƒë·ªïi theo giai ƒëo·∫°n
            st.header("6. T·ªâ l·ªá chuy·ªÉn ƒë·ªïi theo giai ƒëo·∫°n")
            show_conversion_rate_by_stage(filtered_df)

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì doanh thu theo nh√¢n vi√™n kinh doanh
            st.header("7. Doanh thu theo nh√¢n vi√™n kinh doanh")
            show_sales_by_salesperson(filtered_df)
            
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì s·ªë c∆° h·ªôi theo ƒë·ªëi th·ªß
            st.header("8. S·ªë c∆° h·ªôi theo ƒë·ªëi th·ªß")
            show_opportunities_by_competitor(filtered_df)
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu chi ti·∫øt
            st.header("9. D·ªØ li·ªáu chi ti·∫øt")
            show_detailed_data(filtered_df)
            
        else:
            st.info("‚ö†Ô∏è Vui l√≤ng ki·ªÉm tra l·∫°i file d·ªØ li·ªáu c·ªßa b·∫°n.")
    else:
        st.info("üëÜ Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

if __name__ == '__main__':
    main()
