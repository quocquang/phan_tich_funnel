import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO
import openpyxl
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor

# C·∫•u h√¨nh trang Streamlit (ƒë·∫£m b·∫£o l·ªánh n√†y n·∫±m ·ªü ƒë·∫ßu file)
st.set_page_config(layout="wide", page_title="Ph√¢n T√≠ch Funnel")

# CSS t√πy ch·ªânh giao di·ªán
st.markdown("""
    <style>
    .main > div {
        padding: 2rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    .stTabs [data-baseweb="tab"] {
        height: 3rem;
    }
    </style>
""", unsafe_allow_html=True)

# ------------------- H√†m x·ª≠ l√Ω d·ªØ li·ªáu ------------------- #
@st.cache_data
def load_data(file):
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file)
        elif file.name.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(file)
        else:
            st.error("ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng CSV ho·∫∑c Excel.")
            return None

        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü t√™n c·ªôt
        df.columns = df.columns.str.strip()

        # Chuy·ªÉn ƒë·ªïi c√°c c·ªôt ng√†y th√°ng
        date_columns = ["Ng√†y d·ª± ki·∫øn k√≠ Hƒê", "Th·ªùi ƒëi·ªÉm t·∫°o"]
        for col in date_columns:
            df[col] = pd.to_datetime(df[col], format="%d/%m/%Y", errors='coerce')
        
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {str(e)}")
        return None

# ------------------- H√†m l·ªçc d·ªØ li·ªáu ------------------- #
def apply_filters(df, filters):
    filtered_df = df.copy()
    
    if filters.get("T√™n kh√°ch h√†ng"):
        filtered_df = filtered_df[filtered_df["T√™n kh√°ch h√†ng"].isin(filters["T√™n kh√°ch h√†ng"])]
        
    if filters.get("Giai ƒëo·∫°n"):
        filtered_df = filtered_df[filtered_df["Giai ƒëo·∫°n"].isin(filters["Giai ƒëo·∫°n"])]
        
    if filters.get("T·ªâ l·ªá th·∫Øng"):
        filtered_df = filtered_df[filtered_df["T·ªâ l·ªá th·∫Øng"].isin(filters["T·ªâ l·ªá th·∫Øng"])]
        
    if filters.get("T·ªânh/TP"):
        filtered_df = filtered_df[filtered_df["T·ªânh/TP"].isin(filters["T·ªânh/TP"])]
    
    if filters.get("Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£"):
        filtered_df = filtered_df[
            filtered_df["Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£"].isin(
                filters["Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£"]
            )
        ]
        
    if filters.get("Ng√†nh h√†ng"):
        filtered_df = filtered_df[filtered_df["Ng√†nh h√†ng"].isin(filters["Ng√†nh h√†ng"])]
        
    return filtered_df

def show_filters(df):
    st.sidebar.header("B·ªô l·ªçc")
    
    # X·ª≠ l√Ω gi√° tr·ªã NaN n·∫øu c·∫ßn cho c√°c c·ªôt hi·ªÉn th·ªã
    if "T√™n kh√°ch h√†ng" in df.columns:
        df["T√™n kh√°ch h√†ng"].fillna("Unknown", inplace=True)
    if "Ng√†nh h√†ng" in df.columns:
        df["Ng√†nh h√†ng"].fillna("Unknown", inplace=True)
    
    filters = {
        "T√™n kh√°ch h√†ng": st.sidebar.multiselect(
            "T√™n kh√°ch h√†ng:", 
            options=sorted(df["T√™n kh√°ch h√†ng"].unique())
        ),
        "Giai ƒëo·∫°n": st.sidebar.multiselect(
            "Giai ƒëo·∫°n:", 
            options=sorted(df["Giai ƒëo·∫°n"].unique())
        ),
        "T·ªâ l·ªá th·∫Øng": st.sidebar.multiselect(
            "T·ªâ l·ªá th·∫Øng:", 
            options=sorted(df["T·ªâ l·ªá th·∫Øng"].unique())
        ),
        "T·ªânh/TP": st.sidebar.multiselect(
            "T·ªânh/TP:", 
            options=sorted(df["T·ªânh/TP"].astype(str).unique())
        ),
        "Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£": st.sidebar.multiselect(
            "Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£:", 
            options=sorted(df["Nh√≥m kh√°ch h√†ng theo ch√≠nh s√°ch c√¥ng n·ª£"].unique())
        ),
        "Ng√†nh h√†ng": st.sidebar.multiselect(
            "Ng√†nh h√†ng:", 
            options=sorted(df["Ng√†nh h√†ng"].unique())
        ),
    }
    
    return apply_filters(df, filters)

# ------------------- H√†m hi·ªÉn th·ªã trang b√¨a ------------------- #
def show_cover_page():
    st.title("Ph√¢n T√≠ch Funnel")
    st.write("""
        **M·ª•c ti√™u:** ·ª®ng d·ª•ng n√†y gi√∫p ph√¢n t√≠ch Funnel, theo d√µi hi·ªáu su·∫•t v√† x√°c ƒë·ªãnh c√°c kho·∫£n Funnel.
        **T√≠nh nƒÉng:**
        - L·ªçc d·ªØ li·ªáu theo th·ªùi gian, khu v·ª±c, tr·∫°ng th√°i, v√† ng∆∞·ªùi qu·∫£n l√Ω.
        - Tr√¨nh b√†y tr·ª±c quan c√°c ch·ªâ s·ªë ch√≠nh v√† bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt.
        - Xu·∫•t d·ªØ li·ªáu ƒë√£ l·ªçc d∆∞·ªõi d·∫°ng CSV/Excel.
    """)
    st.image("https://github.com/user-attachments/assets/f263bd14-23a4-4735-b082-1d10ade1bbb0", use_column_width=True)

# ------------------- H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë ------------------- #

# I. Ch·ªâ s·ªë ph√¢n t√≠ch m√¥ t·∫£
def calculate_descriptive_metrics(df):
    metrics = {}
    
    # 1. T·ªïng s·ªë c∆° h·ªôi
    metrics['total_opportunities'] = len(df)
    
    # 2. Ph√¢n b·ªë theo giai ƒëo·∫°n (t√≠nh ph·∫ßn trƒÉm)
    stage_dist = df['Giai ƒëo·∫°n'].value_counts(normalize=True) * 100
    metrics['stage_distribution'] = stage_dist
    
    # 3. T·ªïng doanh thu d·ª± ki·∫øn
    metrics['total_expected_revenue'] = df['Doanh thu d·ª± ki·∫øn'].sum()
    
    # 4. Doanh thu d·ª± ki·∫øn trung b√¨nh
    metrics['avg_expected_revenue'] = df['Doanh thu d·ª± ki·∫øn'].mean()
    
    # 5. Doanh thu d·ª± ki·∫øn trung v·ªã
    metrics['median_expected_revenue'] = df['Doanh thu d·ª± ki·∫øn'].median()
    
    # 6. ƒê·ªô l·ªách chu·∫©n c·ªßa doanh thu d·ª± ki·∫øn
    metrics['std_expected_revenue'] = df['Doanh thu d·ª± ki·∫øn'].std()
    
    # 7. T·ªâ l·ªá th·∫Øng trung b√¨nh (chuy·ªÉn ƒë·ªïi c·ªôt n·∫øu c·∫ßn)
    df['T·ªâ l·ªá th·∫Øng'] = pd.to_numeric(df['T·ªâ l·ªá th·∫Øng'], errors='coerce')
    metrics['avg_win_rate'] = df['T·ªâ l·ªá th·∫Øng'].mean()
    
    # 8. Th·ªùi gian trung b√¨nh t·ª´ t·∫°o ƒë·∫øn k√Ω Hƒê
    # N·∫øu ch∆∞a t·ªìn t·∫°i c·ªôt "time_to_sign", t√≠nh to√°n t·ª´ 2 c·ªôt ng√†y
    if "time_to_sign" not in df.columns:
        df['time_to_sign'] = (df['Ng√†y d·ª± ki·∫øn k√≠ Hƒê'] - df['Th·ªùi ƒëi·ªÉm t·∫°o']).dt.days
    metrics['avg_time_to_sign'] = df['time_to_sign'].mean()
    
    return metrics

# II. Ch·ªâ s·ªë ph√¢n t√≠ch d·ª± ƒëo√°n
def calculate_predictive_metrics(df):
    # T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ kh√¥ng l√†m thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
    df_model = df.copy()
    
    # N·∫øu ch∆∞a c√≥ c·ªôt time_to_sign, t√≠nh to√°n n√≥
    if "time_to_sign" not in df_model.columns:
        df_model["time_to_sign"] = (df_model["Ng√†y d·ª± ki·∫øn k√≠ Hƒê"] - df_model["Th·ªùi ƒëi·ªÉm t·∫°o"]).dt.days

    # Danh s√°ch c√°c c·ªôt categorical c·∫ßn m√£ h√≥a. Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa t·ª´ng c·ªôt.
    categorical_cols = []
    for col in ['Giai ƒëo·∫°n', 'Tr·∫°ng th√°i', 'Ng√†nh h√†ng', 'Nh√¢n vi√™n kinh doanh']:
        if col in df_model.columns:
            categorical_cols.append(col)
    
    le = LabelEncoder()
    for col in categorical_cols:
        # √âp d·ªØ li·ªáu v·ªÅ chu·ªói ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng l·ªói
        df_model[col] = le.fit_transform(df_model[col].astype(str))
    
    # Ch·ªçn c√°c t√≠nh nƒÉng (features)
    # N·∫øu "T·ªâ l·ªá th·∫Øng" ch∆∞a ·ªü d·∫°ng numeric, h√£y ƒë·∫£m b·∫£o n√≥ ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi
    X_cols = categorical_cols + ['Doanh thu d·ª± ki·∫øn', 'T·ªâ l·ªá th·∫Øng']
    X = df_model[X_cols].fillna(0)
    y = df_model["time_to_sign"].fillna(0)
    
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X, y)
    
    feature_importance = pd.DataFrame({
        'feature': X.columns,
        'importance': rf_model.feature_importances_
    }).sort_values('importance', ascending=False)
    
    return feature_importance

# III. Ch·ªâ s·ªë ph√¢n t√≠ch chu·∫©n ƒëo√°n
def calculate_diagnostic_metrics(df):
    # Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c c·ªôt s·ªë
    numeric_cols = ['Doanh thu d·ª± ki·∫øn', 'T·ªâ l·ªá th·∫Øng', 'time_to_sign']
    corr_matrix = df[numeric_cols].corr()
    
    # Ph√¢n t√≠ch hi·ªáu su·∫•t nh√¢n vi√™n kinh doanh (n·∫øu c·ªôt n√†y t·ªìn t·∫°i)
    if "Nh√¢n vi√™n kinh doanh" in df.columns:
        sales_performance = df.groupby("Nh√¢n vi√™n kinh doanh").agg({
            'Doanh thu d·ª± ki·∫øn': ['count', 'mean', 'sum'],
            'T·ªâ l·ªá th·∫Øng': 'mean'
        }).round(2)
    else:
        sales_performance = None
    
    return corr_matrix, sales_performance

# ------------------- H√†m main ------------------- #
def main():
    st.title('üéØ H·ªá Th·ªëng Ph√¢n T√≠ch Funnel N√¢ng Cao')
    
    # Hi·ªÉn th·ªã trang b√¨a
    show_cover_page()
    
    # T·∫£i file d·ªØ li·ªáu t·ª´ sidebar
    uploaded_file = st.sidebar.file_uploader("üìÇ T·∫£i l√™n file d·ªØ li·ªáu", 
                                               type=['csv', 'xlsx', 'xls'],
                                               help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng CSV v√† Excel")
    
    if uploaded_file is not None:
        df = load_data(uploaded_file)
        
        if df is not None:
            # √Åp d·ª•ng b·ªô l·ªçc d·ªØ li·ªáu
            filtered_df = show_filters(df)
            
            # ƒê·∫£m b·∫£o c·ªôt "Doanh thu d·ª± ki·∫øn" l√† s·ªë
            filtered_df['Doanh thu d·ª± ki·∫øn'] = pd.to_numeric(filtered_df['Doanh thu d·ª± ki·∫øn'], errors='coerce').fillna(0)
            
            # T√≠nh to√°n c√°c ch·ªâ s·ªë
            desc_metrics = calculate_descriptive_metrics(filtered_df)
            feature_importance = calculate_predictive_metrics(filtered_df)
            corr_matrix, sales_performance = calculate_diagnostic_metrics(filtered_df)
            
            # Hi·ªÉn th·ªã Dashboard
            st.header("1. Ch·ªâ s·ªë Ph√¢n t√≠ch M√¥ t·∫£")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªïng s·ªë c∆° h·ªôi", f"{desc_metrics['total_opportunities']:,}")
            with col2:
                st.metric("T·ªïng doanh thu d·ª± ki·∫øn", f"{desc_metrics['total_expected_revenue']:,.0f} VND")
            with col3:
                st.metric("T·ªâ l·ªá th·∫Øng trung b√¨nh", f"{desc_metrics['avg_win_rate']:.1f}%")
            
            col4, col5, col6 = st.columns(3)
            with col4:
                st.metric("Doanh thu trung b√¨nh", f"{desc_metrics['avg_expected_revenue']:,.0f} VND")
            with col5:
                st.metric("Doanh thu trung v·ªã", f"{desc_metrics['median_expected_revenue']:,.0f} VND")
            with col6:
                st.metric("Th·ªùi gian trung b√¨nh ƒë·∫øn k√Ω Hƒê", f"{desc_metrics['avg_time_to_sign']:.1f} ng√†y")
            
            st.subheader("Ph√¢n b·ªë doanh thu theo giai ƒëo·∫°n")
            fig1 = px.box(filtered_df, x="Giai ƒëo·∫°n", y="Doanh thu d·ª± ki·∫øn",
                          title="Ph√¢n b·ªë doanh thu d·ª± ki·∫øn theo giai ƒëo·∫°n")
            st.plotly_chart(fig1, use_container_width=True)
            
            st.header("2. Ch·ªâ s·ªë Ph√¢n t√≠ch D·ª± ƒëo√°n")
            st.subheader("T·∫ßm quan tr·ªçng c·ªßa c√°c y·∫øu t·ªë")
            fig2 = px.bar(feature_importance, x='importance', y='feature', orientation='h',
                          title="Feature Importance trong d·ª± ƒëo√°n th·ªùi gian k√Ω Hƒê")
            st.plotly_chart(fig2, use_container_width=True)
            
            st.header("3. Ch·ªâ s·ªë Ph√¢n t√≠ch Chu·∫©n ƒëo√°n")
            st.subheader("Ma tr·∫≠n t∆∞∆°ng quan")
            fig3 = px.imshow(corr_matrix, 
                             labels=dict(color="Correlation"),
                             title="Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c bi·∫øn s·ªë")
            st.plotly_chart(fig3, use_container_width=True)
            
            st.subheader("Ph√¢n t√≠ch hi·ªáu su·∫•t nh√¢n vi√™n kinh doanh")
            if sales_performance is not None:
                st.dataframe(sales_performance)
            else:
                st.info("Kh√¥ng c√≥ d·ªØ li·ªáu cho ph√¢n t√≠ch nh√¢n vi√™n kinh doanh.")
            
            st.header("4. Ph√¢n t√≠ch theo th·ªùi gian")
            fig4 = px.timeline(
                filtered_df,
                x_start="Th·ªùi ƒëi·ªÉm t·∫°o",
                x_end="Ng√†y d·ª± ki·∫øn k√≠ Hƒê",
                y="T√™n c∆° h·ªôi",
                title="Timeline c√°c c∆° h·ªôi"
            )
            st.plotly_chart(fig4, use_container_width=True)
            
            st.header("5. D·ªØ li·ªáu chi ti·∫øt")
            st.dataframe(
                filtered_df.style.format({
                    "Doanh thu d·ª± ki·∫øn": "{:,.0f}",
                    "T·ªâ l·ªá th·∫Øng": "{:.1f}%"
                })
            )
            
            csv = filtered_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                "T·∫£i d·ªØ li·ªáu",
                csv,
                "data.csv",
                "text/csv",
                key='download-csv'
            )
        else:
            st.info("Vui l√≤ng t·∫£i l√™n file d·ªØ li·ªáu ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
            
if __name__ == '__main__':
    main()
